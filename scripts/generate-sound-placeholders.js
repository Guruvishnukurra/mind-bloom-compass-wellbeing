import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Sound files directory
const soundsDir = path.join(__dirname, '../public/sounds');
if (!fs.existsSync(soundsDir)) {
  fs.mkdirSync(soundsDir, { recursive: true });
}

// List of required sound files
const soundFiles = [
  'rain.mp3',
  'birds.mp3',
  'night.mp3',
  'ocean-waves.mp3',
  'forest.mp3',
  'stream.mp3',
  'chimes.mp3',
  'bells.mp3',
  'meditation-bell.mp3'
];

// Sample MP3 file content (a minimal valid MP3 file)
// This is a 1-second silent MP3 file
// Using a larger, more compatible silent MP3 file
const sampleMp3Content = Buffer.from([
  0x49, 0x44, 0x33, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x54, 0x49, 0x54, 0x32, 0x00, 0x00,
  0x00, 0x19, 0x00, 0x00, 0x03, 0x53, 0x69, 0x6C, 0x65, 0x6E, 0x74, 0x20, 0x41, 0x75, 0x64, 0x69,
  0x6F, 0x20, 0x50, 0x6C, 0x61, 0x63, 0x65, 0x68, 0x6F, 0x6C, 0x64, 0x65, 0x72, 0x54, 0x50, 0x45,
  0x31, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x03, 0x4D, 0x69, 0x6E, 0x64, 0x42, 0x6C, 0x6F, 0x6F,
  0x6D, 0x20, 0x41, 0x70, 0x70, 0xFF, 0xFB, 0x92, 0x04, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0xFB, 0x92, 0x04, 0xC4, 0x00, 0x01, 0xA5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]);

// Create placeholder MP3 files
function createPlaceholderMp3Files() {
  console.log('Creating placeholder MP3 files...');
  
  for (const soundFile of soundFiles) {
    const filePath = path.join(soundsDir, soundFile);
    
    // Skip if file already exists and is not empty (at least 1KB)
    if (fs.existsSync(filePath)) {
      const stats = fs.statSync(filePath);
      if (stats.size > 1024) {
        console.log(`✅ ${soundFile} already exists (${Math.round(stats.size / 1024)} KB)`);
        continue;
      } else {
        console.log(`⚠️ ${soundFile} exists but is too small (${stats.size} bytes), replacing...`);
      }
    }
    
    // Write the sample MP3 content to the file
    fs.writeFileSync(filePath, sampleMp3Content);
    console.log(`✅ Created placeholder for ${soundFile}`);
  }
  
  console.log('Placeholder creation complete!');
}

// Run the function
createPlaceholderMp3Files();